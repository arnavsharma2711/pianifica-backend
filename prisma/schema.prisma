// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  users    User[]
  teams    Team[]
  projects Project[]
}

model User {
  id                Int       @id @default(autoincrement())
  organizationId    Int
  firstName         String
  lastName          String?
  username          String
  email             String    @unique
  password          String
  profilePictureUrl String?
  phone             String?
  designation       String?
  verifiedAt        DateTime?
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  userRoles      UserRole[]
  organization   Organization   @relation(fields: [organizationId], references: [id])
  userToken      UserToken[]
  teamsOnUsers   TeamsOnUsers[]
  notification   Notification[]
  authoredTasks  Task[]         @relation("TaskAuthor")
  assignedTasks  Task[]         @relation("TaskAssignee")
  taskActivities TaskActivity[]
  comment        Comment[]
  bookmark       Bookmark[]

  @@unique([username, organizationId])
}

enum TokenType {
  VERIFY_EMAIL
  RESET_PASSWORD
}

model UserToken {
  userId    Int
  token     String
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

enum Role {
  SUPER_ADMIN
  ORG_SUPER_ADMIN
  ORG_ADMIN
  ORG_MEMBER
}

model UserRole {
  userId    Int
  role      Role     @default(ORG_MEMBER)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, role])
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
  COMPLETED
}

model Project {
  id             Int           @id @default(autoincrement())
  organizationId Int
  name           String
  description    String?
  budget         Float?
  status         ProjectStatus @default(ACTIVE)
  createdBy      Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  organization    Organization      @relation(fields: [organizationId], references: [id])
  teamsOnProjects TeamsOnProjects[]
  tasks           Task[]
  bookmark        Bookmark[]
}

model Team {
  id             Int       @id @default(autoincrement())
  organizationId Int
  name           String
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  organization    Organization      @relation(fields: [organizationId], references: [id])
  teamsOnUsers    TeamsOnUsers[]
  teamsOnProjects TeamsOnProjects[]

  @@unique([name, organizationId])
}

enum TeamRole {
  MANAGER
  MEMBER
}

model TeamsOnUsers {
  userId    Int
  teamId    Int
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model TeamsOnProjects {
  teamId    Int
  projectId Int
  createdAt DateTime @default(now())

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([teamId, projectId])
}

model Notification {
  id             Int       @id @default(autoincrement())
  userId         Int
  notifiableType String
  notifiableId   Int
  message        String
  readAt         DateTime?
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([notifiableId, notifiableType])
}

enum TaskType {
  FEATURE
  IMPROVEMENT
  BUG
}

enum TaskStatus {
  BLOCKED
  TODO
  IN_PROGRESS
  UNDER_REVIEW
  RELEASE_READY
  COMPLETED
}

enum TaskPriority {
  BACKLOG
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id         Int           @id @default(autoincrement())
  projectId  Int
  title      String
  type       TaskType      @default(FEATURE)
  summary    String?
  status     TaskStatus?   @default(TODO)
  priority   TaskPriority? @default(BACKLOG)
  dueDate    DateTime?
  authorId   Int
  assigneeId Int?
  parentId   Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?

  project        Project        @relation(fields: [projectId], references: [id])
  author         User           @relation("TaskAuthor", fields: [authorId], references: [id])
  assignee       User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
  subTasks       Task[]         @relation("Task_SubTask")
  parent         Task?          @relation("Task_SubTask", fields: [parentId], references: [id])
  taskActivities TaskActivity[]
  comment        Comment[]
  bookmark       Bookmark[]
}

model TaskActivity {
  id            Int      @id @default(autoincrement())
  taskId        Int
  userId        Int
  actionType    String
  actionOn      String
  previousValue String?
  updatedValue  String?
  createdAt     DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  taskId    Int
  userId    Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int?
  projectId Int?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}
